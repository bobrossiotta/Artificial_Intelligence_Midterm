# -*- coding: utf-8 -*-
"""Midterm_ipynb_adlı_not_defterinin_kopyası.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t7oZvm6DFwdvmMPKPFPHcLPnCAPjy91I

# Yapay Zeka'ya Giriş - Midterm

## Bilgi

1. Ödev dokümanın adi "Midterm_Isim_Varsaikinciisim_Soyisim.ipynb" formatında olmalıdır.
2. Örneğin öğrencinin adı Mustafa Kadir Halıcı ise dokümanı "Midterm_Mustafa_Kadir_Halici.ipynb" olarak yüklemelidir.
3. Öğrencilerin amacı aşağıda verilen 10 fonksiyon/sınıf kod bloklarını verilen önerge ve örneklere göre doldurmaktır.
4. Aşağıdaki sorularda eğer fonksiyona yanlış/istenmeyen bir girdi değeri veriliyor ise "raise GirdiHatasi" çıktısı verilmelidir. Quiz C

## Yükleme
"""

import numpy
import pandas

"""### Error Handling"""

# Öğrenciler bu kısmı değiştirmeyecektir.
class GirdiHatasi(Exception):
    pass

"""### Soru 1"""

import pandas as pd

class GirdiHatasi(Exception):
    pass

def dosya_oku(dosyayolu: str) -> pd.DataFrame:
  try:
    if not dosyayolu.lower().endswith(('.csv', '.tab')):
      raise GirdiHatasi("Geçersiz dosya uzantısı. Dosya uzantısı .csv veya .tab olmalıdır.")

    if dosyayolu.lower().endswith('.csv'):
      sonuc = pd.read_csv(dosyayolu)
    elif dosyayolu.lower().endswith('.tab'):
      sonuc = pd.read_csv(dosyayolu, delimiter='\t')
    else:
      raise GirdiHatasi("Beklenmeyen bir hata oluştu.")

    return sonuc

    except GirdiHatasi as e:
      raise e

try:
    dosyayolu_csv = 'ornek.csv'
    dataframe_csv = dosya_oku(dosyayolu_csv)
    print(f"{dosyayolu_csv} dosyasının DataFrame hali:")
    print(dataframe_csv)

    dosyayolu_tab = 'ornek.tab'
    dataframe_tab = dosya_oku(dosyayolu_tab)
    print(f"\n{dosyayolu_tab} dosyasının DataFrame hali:")
    print(dataframe_tab)

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 2"""

import pandas as pd

class GirdiHatasi(Exception):
    pass

def sikayet_tipi_N(df: pd.DataFrame, N: int) -> list:
  try:
    if not isinstance(df, pd.DataFrame):
      raise GirdiHatasi("Geçersiz DataFrame. pandas.DataFrame bekleniyor.")

    if not isinstance(N, int) or N <= 0 or N > 165:
      raise GirdiHatasi("Geçersiz N değeri. N, 0'dan büyük ve 165'ten küçük olmalıdır.")

    if "Complaint Type" not in df.columns:
      raise GirdiHatasi("DataFrame'de 'Complaint Type' sütunu bulunamadı.")

    sikayet_tipleri = df["Complaint Type"].value_counts().index[:N].tolist()

        return sikayet_tipleri

  except GirdiHatasi as e:
    raise e

try:
    dosya_yolu = "311-service-requests.csv"
    df = pd.read_csv(dosya_yolu)
    sonuc = sikayet_tipi_N(df, 10)
    print("En çok tekrar eden 10 şikayet tipi:")
    print(sonuc)

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 3"""

import pandas as pd

class GirdiHatasi(Exception):
    pass

def benzersiz_ajans_sayisi(df: pd.DataFrame) -> int:
  try:
    if not isinstance(df, pd.DataFrame):
      raise GirdiHatasi("Geçersiz DataFrame. pandas.DataFrame bekleniyor.")

    if "Agency Name" not in df.columns:
      raise GirdiHatasi("DataFrame'de 'Agency Name' sütunu bulunamadı.")

        benzersiz_ajanslar = df["Agency Name"].nunique()

      return benzersiz_ajanslar

  except GirdiHatasi as e:
    raise e


try:
    dosya_yolu = "311-service-requests.csv"
    df = pd.read_csv(dosya_yolu)
    sonuc = benzersiz_ajans_sayisi(df)
    print("Benzersiz ajans sayısı:")
    print(sonuc)

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 4"""

import pandas as pd

class GirdiHatasi(Exception):
    pass

def problemli_kentleri_bul(df: pd.DataFrame) -> list:
  try:
    if not isinstance(df, pd.DataFrame):
      raise GirdiHatasi("Geçersiz DataFrame. pandas.DataFrame bekleniyor.")

    if "Borough" not in df.columns or "Complaint Type" not in df.columns:
      raise GirdiHatasi("DataFrame'de 'Borough' veya 'Complaint Type' sütunu bulunamadı.")

        illegal_parking_df = df[df["Complaint Type"] == "Illegal Parking"]

        kent_sikayet_sayilari = illegal_parking_df["Borough"].value_counts().head(5).reset_index().values.tolist()

      return kent_sikayet_sayilari

  except GirdiHatasi as e:
    raise e

try:
    dosya_yolu = "311-service-requests.csv"
    df = pd.read_csv(dosya_yolu)
    sonuc = problemli_kentleri_bul(df)
    print("En çok illegal park şikayeti alan 5 kent:")
    print(sonuc)

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 5

![my_max_pooling_ornek.png](attachment:my_max_pooling_ornek.png)
"""

import numpy as np

class GirdiHatasi(Exception):
    pass

def my_max_pooling(matrix: np.array) -> np.array:
  try:
    if not isinstance(matrix, np.ndarray) or matrix.ndim != 2 or matrix.shape[0] != matrix.shape[1] or matrix.shape[0] % 4 != 0:
      raise GirdiHatasi("Geçersiz girdi tipi veya boyutu. Numpy array olmalı ve boyutu (N, N) olmalıdır, N 4'ün tam katı olmalıdır.")

        N = matrix.shape[0]
    if N % 4 != 0:
      raise GirdiHatasi("Geçersiz boyut. N, 4'ün tam katı olmalıdır.")

        yeni_N = N // 2

        yeni_matrix = np.zeros((yeni_N, yeni_N))

    for i in range(0, N, 2):
      for j in range(0, N, 2):
        yeni_matrix[i // 2, j // 2] = np.max(matrix[i:i+2, j:j+2])

    return yeni_matrix

  except GirdiHatasi as e:
    raise e

try:
    N = 4
    girdi_matrix = np.random.randint(0, 10, size=(N, N))

    print("Önceki Matrix:")
    print(girdi_matrix)

    sonuc = my_max_pooling(girdi_matrix)

    print("\nYeni Matrix:")
    print(sonuc)

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 6"""

from datetime import datetime, timedelta

class GirdiHatasi(Exception):
    pass

def yilin_bitmesine_kac_gun_kaldi(girdi_tarihi: str) -> int:
  try:
    tarih_objesi = datetime.strptime(girdi_tarihi, "%Y-%m-%d")

    simdiki_tarih = datetime.now()

    if tarih_objesi <= simdiki_tarih:
      raise GirdiHatasi("Geçmiş bir tarih girdiniz. Lütfen gelecek bir tarih giriniz.")

      yilin_son_gunu = datetime(simdiki_tarih.year, 12, 31)

      kalan_gun = (yilin_son_gunu - tarih_objesi).days

    return kalan_gun

  except ValueError:
    raise GirdiHatasi("Geçersiz tarih formatı. Lütfen 'YYYY-AA-GG' formatında bir tarih giriniz.")

def kullanici_yilini_al():
  try:
    yil = int(input("Lütfen içinde bulunduğunuz yılı giriniz: "))
    return yil

  except ValueError:
    raise GirdiHatasi("Geçersiz yıl formatı. Lütfen sayısal bir yıl giriniz.")

try:
    yil = kullanici_yilini_al()

    girdi_tarihi = f"{yil}-12-31"

    sonuc = yilin_bitmesine_kac_gun_kaldi(girdi_tarihi)

    print(f"{girdi_tarihi} tarihine kadar kalan gün sayısı: {sonuc}")
except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 7

![tekrarlari_temizle_ornek.png](attachment:tekrarlari_temizle_ornek.png)
"""

import pandas as pd

class GirdiHatasi(Exception):
    pass

def tekrarlari_temizle(df: pd.DataFrame) -> pd.DataFrame:
  try:
    if not isinstance(df, pd.DataFrame):
      raise GirdiHatasi("Geçersiz girdi tipi. DataFrame bekleniyor.")

    if df.empty:
      raise GirdiHatasi("DataFrame boş. Geçerli bir DataFrame bekleniyor.")

    if df.columns[0] not in df.columns:
      raise GirdiHatasi("İlk sütunun adı DataFrame'de bulunmamaktadır.")

      zaman_pulu_sutunu = df[df.columns[0]]

    if not pd.api.types.is_datetime64_any_dtype(zaman_pulu_sutunu):
      raise GirdiHatasi("Zaman pulu sütunu datetime tipinde olmalıdır.")

      df_temizlenmis = df.sort_values(by=df.columns[0], ascending=False).drop_duplicates(subset=df.columns[0])

    return df_temizlenmis

  except GirdiHatasi as e:
    raise e

try:
    data = {'Zaman Pulu': ['2023-01-01 10:00:00', '2023-01-02 15:30:00', '2023-01-01 10:00:00', '2023-01-03 08:45:00']}
    df = pd.DataFrame(data)

    print("Önceki DataFrame:")
    print(df)

    sonuc = tekrarlari_temizle(df)

    print("\nTemizlenmiş DataFrame:")
    print(sonuc)

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 8"""

import numpy as np

class GirdiHatasi(Exception):
    pass

def bosluklari_doldur(veri: np.array, duzenleme_modu: int) -> np.array or bool:
  try:
    if not isinstance(veri, np.ndarray) or veri.ndim != 1 or veri.size == 0:
      raise GirdiHatasi("Geçersiz veri tipi veya boyutu. Numpy array olmalı ve boş olmamalı.")

    if not np.all((veri >= 0) & (veri <= 100)):
      raise GirdiHatasi("Verilerin tamamı 0 ile 100 arasında olmalıdır.")

      gecerli_degerler = veri[(veri >= 0) & (veri <= 100)]

    if len(gecerli_degerler) == 0:
      raise GirdiHatasi("Geçerli veri bulunmamaktadır.")

    if duzenleme_modu == 0:
      sonuc = np.concatenate(([gecerli_degerler[0]], gecerli_degerler[:-1]))

    elif duzenleme_modu == 1:
      sonuc = np.convolve(gecerli_degerler, [0.5, 0.5], mode='same')

    elif duzenleme_modu == 2:
      ort = np.mean(gecerli_degerler)
      sonuc = np.where((veri < 0) | (veri > 100), ort, veri)

    else:
      raise GirdiHatasi("Geçersiz düzenleme modu. 0, 1 veya 2 olmalıdır.")

      return sonuc

  except GirdiHatasi as e:
    raise e

try:
    veri = np.array([1, 2, 3, 4, 5, 6, -1, 8, 9, 10, 11])

    duzenleme_modu = 0
    sonuc = bosluklari_doldur(veri, duzenleme_modu)
    print(f"duzenleme_modu: {duzenleme_modu}, sonuc: {sonuc}")

    duzenleme_modu = 1
    sonuc = bosluklari_doldur(veri, duzenleme_modu)
    print(f"duzenleme_modu: {duzenleme_modu}, sonuc: {sonuc}")

    duzenleme_modu = 2
    sonuc = bosluklari_doldur(veri, duzenleme_modu)
    print(f"duzenleme_modu: {duzenleme_modu}, sonuc: {sonuc}")

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 9"""

class GirdiHatasi(Exception):
    pass

class UnutkanSayac():
    def __init__(self, hafiza_suresi_ms):
      try:
        if not isinstance(hafiza_suresi_ms, int) or hafiza_suresi_ms <= 0:
          raise GirdiHatasi("Hafıza süresi pozitif bir tam sayı olmalıdır.")

          self.hafiza_suresi_ms = hafiza_suresi_ms

          self.ping_zamani = []

      except GirdiHatasi as e:
        raise e

    def ping(self, yapilan_sorgu_zamani_ms):
      try:
        if not isinstance(yapilan_sorgu_zamani_ms, int) or yapilan_sorgu_zamani_ms <= 0:
          raise GirdiHatasi("Sorgu zamanı pozitif bir tam sayı olmalıdır.")

          self.ping_zamani.append(yapilan_sorgu_zamani_ms)

          self.ping_zamani = [t for t in self.ping_zamani if yapilan_sorgu_zamani_ms - t <= self.hafiza_suresi_ms]

          sonuc = len(self.ping_zamani)

        return sonuc

      except GirdiHatasi as e:
        raise e

try:
    bilgisayar_1 = UnutkanSayac(1000)

    guncel_sayac_1 = bilgisayar_1.ping(200)
    print(guncel_sayac_1)  # 1

    guncel_sayac_1 = bilgisayar_1.ping(400)
    print(guncel_sayac_1)  # 2

    guncel_sayac_1 = bilgisayar_1.ping(500)
    print(guncel_sayac_1)  # 3

    guncel_sayac_1 = bilgisayar_1.ping(1000)
    print(guncel_sayac_1)  # 4

    guncel_sayac_1 = bilgisayar_1.ping(1500)
    print(guncel_sayac_1)  # 3

except GirdiHatasi as e:
    print(f"Hata: {e}")

"""### Soru 10"""

import math
import random

class GirdiHatasi(Exception):
    pass

class Karakter:
    def __init__(self, baslangic_koordinati: tuple):
        if not isinstance(baslangic_koordinati, tuple) or len(baslangic_koordinati) != 2 or not all(isinstance(x, int) for x in baslangic_koordinati):
            raise GirdiHatasi("Geçersiz başlangıç koordinatları. tuple ve iki integer bekleniyor.")
        self.anlik_konum = baslangic_koordinati

    def hareket_et(self, hareket: tuple):
        if not isinstance(hareket, tuple) or len(hareket) != 2 or not all(isinstance(x, int) for x in hareket):
            raise GirdiHatasi("Geçersiz hareket. tuple ve iki integer bekleniyor.")
        self.anlik_konum = tuple(map(lambda x, y: x + y, self.anlik_konum, hareket))

    def yuru(self, yon: int):
        if not isinstance(yon, int) or yon not in range(4):
            raise GirdiHatasi("Geçersiz yön. 0, 1, 2 veya 3 bekleniyor.")
        hareketler = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        self.hareket_et(hareketler[yon])

    def zipla(self, yon: int):
        if not isinstance(yon, int) or yon not in range(4):
            raise GirdiHatasi("Geçersiz yön. 0, 1, 2 veya 3 bekleniyor.")
        hareketler = [(0, 2), (2, 0), (0, -2), (-2, 0)]
        self.hareket_et(hareketler[yon])

class Oyuncu(Karakter):
    def __init__(self, baslangic_koordinati: tuple):
        super().__init__(baslangic_koordinati)
        self.ziplama_hakki = 2

    def dusmanlari_gor(self, dusman_listesi: list) -> int:
        if not isinstance(dusman_listesi, list) or not all(isinstance(dusman, Dusman) for dusman in dusman_listesi):
            raise GirdiHatasi("Geçersiz düşman listesi. Liste ve Dusman sınıfından objeler bekleniyor.")
        sayac = 0
        for dusman in dusman_listesi:
            mesafe = math.sqrt((dusman.anlik_konum[0] - self.anlik_konum[0]) ** 2 +
                               (dusman.anlik_konum[1] - self.anlik_konum[1]) ** 2)
            if mesafe <= 10:
                sayac += 1
        return sayac

    def zipla(self, yon: int) -> bool:
        if self.ziplama_hakki > 0:
            super().zipla(yon)
            self.ziplama_hakki -= 1
            return True
        return False

    def yakalandi_mi(self, dusman_listesi: list) -> bool:
        if not isinstance(dusman_listesi, list) or not all(isinstance(dusman, Dusman) for dusman in dusman_listesi):
            raise GirdiHatasi("Geçersiz düşman listesi. Liste ve Dusman sınıfından objeler bekleniyor.")
        for dusman in dusman_listesi:
            if self.anlik_konum == dusman.anlik_konum:
                return True
        return False

class Dusman(Karakter):
    def __init__(self, baslangic_koordinati: tuple):
        super().__init__(baslangic_koordinati)

    def rastgele_hareket_et(self):
        hareket = random.choice([(0, 1), (1, 0), (0, -1), (-1, 0)])
        self.hareket_et(hareket)

    def oyuncuyu_gor(self, oyuncu: Oyuncu) -> bool:
        mesafe = math.sqrt((oyuncu.anlik_konum[0] - self.anlik_konum[0]) ** 2 +
                           (oyuncu.anlik_konum[1] - self.anlik_konum[1]) ** 2)
        return mesafe <= 5

    def yapay_zeka_hareket(self, oyuncu):
        if self.oyuncuyu_gor(oyuncu):
            hareket_yonu = random.choice([0, 1, 2, 3])
            self.yuru(hareket_yonu)
        else:
            self.rastgele_hareket_et()